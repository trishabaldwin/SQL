# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

#Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL. 

--1. Who are the artists with top songs and how many songs does each artist have represented in the top 50?
SELECT 
artist_name,
COUNT(*)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(*) DESC;

--2. Who are the top 10 artists by popularity?
SELECT 
artist_name,
popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC 
LIMIT 10;


--3. Which are the top 10 songs based on popularity?
SELECT 
track_name,
popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC 
LIMIT 10;


--4. What's the average danceability?
SELECT
AVG(danceability)
FROM BIT_DB.Spotifydata;

--5. Which of the top 10 songs are above and which are below the average danceability?
SELECT
track_name,
danceability,
(CASE
    WHEN danceability > 0.68572 THEN 'Above Average'
    WHEN danceability = 0.68572 THEN 'Average'
    WHEN danceability < 0.68572 THEN 'Below Average'
END) AS CompareDanceability
FROM BIT_DB.Spotifydata
LIMIT 10;


--6. What artist released the longest song?
SELECT 
artist_name,
duration_ms/1000 AS song_length_seconds
FROM BIT_DB.Spotifydata
ORDER BY song_length_seconds DESC
LIMIT 1;
